   Repetition Practice Problems With for loop

1.Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less then or equal to 2^n.
#!/bin/bash -x
read -p "enter a nymber: " n
a=1;
for (( i=0; i<=n; i++ ))
do
a=$(($a * 2));
done
OUTPUT::::::::::::::::::::::::
$ ./powerforloop.sh
+ read -p 'enter a nymber: ' n
enter a nymber: 5
+ a=1
+ (( i=0 ))
+ (( i<=n ))
+ a=2
+ (( i++  ))
+ (( i<=n ))
+ a=4
+ (( i++  ))
+ (( i<=n ))
+ a=8
+ (( i++  ))
+ (( i<=n ))
+ a=16
+ (( i++  ))
+ (( i<=n ))
+ a=32
+ (( i++  ))
+ (( i<=n ))
+ a=64
+ (( i++  ))
+ (( i<=n ))
----------------------------------------------------------
2.Write a program that takes a command-line argument n and prints the nth harmonic number.Harmonic Number is of the form
  Hn=1/1+1/2+1/3+1/4+.....+1/n

#!/bin/bash
read -p "enter a number: " n
h=1;
for(( i=2;i<=$n;i++ ))
do
a=`echo $i | awk '{print 1/$1}'`
h=`echo $h $a | awk '{print $1+$2}'`
done
echo $h;

OUTPUT:::::::::::::::::::::::::::::::::::::::::
$ ./Harmonicforloop.sh
enter a number: 5
2.28333

------------------------------------------------------
3.write a program that takes a input and determines if the number is a prime

#!/bin/bash -x
read -p "enter a number: " n
a=$(( $n / 2 ))
b=0;
for(( i=2;i<=$a;i++ ))
do
if [[ `echo $n $i | awk '{print $1%$2}'` == 0 ]]
then
echo "it is not a prime number "
b=1
break;
fi
done
if [ $b -eq 0 ]
then
echo "it is a prime number "
fi
OUTPUT::::::::::::::::::::::::::::::::::
$ ./primenumberforloop.sh
+ read -p 'enter a number: ' n
enter a number: 6
+ a=3
+ b=0
+ (( i=2 ))
+ (( i<=3 ))
++ echo 6 2
++ awk '{print $1%$2}'
+ [[ 0 == 0 ]]
+ echo 'it is not a prime number '
it is not a prime number
+ b=1
+ break
+ '[' 1 -eq 0 ']'
-----------------------------------------------------------
4.Extend the program to take a range of number as input and output the prime numbers in that range
 	
#!/bin/bash -x
read -p "enter a number: " a
read -p "enter a number: " b
for (( i=a; i<=b; i++ ))
do
n=$(( $a / 2 ))
m=0;
for(( i=2;i<=$n;i++ ))
do
if [[ `echo $a $i | awk '{print $1%$2}'` == 0 ]]
then
echo "it is not a prime number "
m=1
break;
fi
done
if [ $m -eq 0 ]
then
echo "it is a prime number "
fi

------------------------------------------------------------------------
5.Write a program that computes a factorial of a number taken as input
     5 Factorial-5!=1*2*3*4*5

#!/bin/bash -x
read -p "enter a number: " n
fact=1
for (( i=1; i<=n; i++ ))
do
fact=$(( fact * i ));
echo "$fact"
done
OUTPUT:::::::::::::::::::::::::::::::::::::::::::::
$ ./factorialforloop.sh
+ read -p 'enter a number: ' n
enter a number: 5
+ fact=1
+ (( i=1 ))
+ (( i<=n ))
+ fact=1
+ echo 1
1
+ (( i++  ))
+ (( i<=n ))
+ fact=2
+ echo 2
2
+ (( i++  ))
+ (( i<=n ))
+ fact=6
+ echo 6
6
+ (( i++  ))
+ (( i<=n ))
+ fact=24
+ echo 24
24
+ (( i++  ))
+ (( i<=n ))
+ fact=120
+ echo 120
120
+ (( i++  ))
+ (( i<=n ))
------------------------------------------------------------------------
6.write a program to compute factors of a number N using prime factorization method.
  logic-> Traverse till i*i<=N instead of i<=N for efficiency
 o/p-> print the prime factors of number N. 
#!/bin/bash -x
read -p "enter a number: " n
a=$(( $n / 2 ))
count=0
for(( i=2;i<=$a;i++ ))
do
if [ `echo $n $i | awk '{print $1%$2}' -eq 0` ]
then
echo -n "$i"
count=1
fi
done
if [[ $count -eq 1 ]]
then
echo "it is a prime number"
else
echo "it is not a prime number"
fi

OUTPUT::::::::::::::::::::::::::
$ ./primefactorize.sh
+ read -p 'enter a number: ' n
enter a number: 6
+ a=3
+ count=0
+ (( i=2 ))
+ (( i<=3 ))
++ echo 6 2
++ awk '{print $1%$2}' -eq 0
awk: fatal: cannot open file `-eq' for reading (No such file or directory)
+ '[' ']'
+ (( i++  ))
+ (( i<=3 ))
++ echo 6 3
++ awk '{print $1%$2}' -eq 0
awk: fatal: cannot open file `-eq' for reading (No such file or directory)
+ '[' ']'
+ (( i++  ))
+ (( i<=3 ))
+ [[ 0 -eq 1 ]]
+ echo 'it is not a prime number'
it is not a prime number
=========================================================================
      Repetition practies problems with while loop

1.write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n till 256 is reached....

#!/bin/bash -x
read -p "enter a number: " n
a=1;
b=1;
while(( $n != 0 && $b < 9 ))
do
a=$(($a * 2));
echo $a
n=$(($n - 1))
b=$(($b + 1))
done
OUTPUT::::::::::::::::::::::::::::::::::::::::
$ ./powerdowhile.sh
+ read -p 'enter a number: ' n
enter a number: 11
+ a=1
+ b=1
+ ((  11 != 0 && 1 < 9  ))
+ a=2
+ echo 2
2
+ n=10
+ b=2
+ ((  10 != 0 && 2 < 9  ))
+ a=4
+ echo 4
4
+ n=9
+ b=3
+ ((  9 != 0 && 3 < 9  ))
+ a=8
+ echo 8
8
+ n=8
+ b=4
+ ((  8 != 0 && 4 < 9  ))
+ a=16
+ echo 16
16
+ n=7
+ b=5
+ ((  7 != 0 && 5 < 9  ))
+ a=32
+ echo 32
32
+ n=6
+ b=6
+ ((  6 != 0 && 6 < 9  ))
+ a=64
+ echo 64
64
+ n=5
+ b=7
+ ((  5 != 0 && 7 < 9  ))
+ a=128
+ echo 128
128
+ n=4
+ b=8
+ ((  4 != 0 && 8 < 9  ))
+ a=256
+ echo 256
256
+ n=3
+ b=9
+ ((  3 != 0 && 9 < 9  ))
----------------------------------------------------------
2.find the magic number
a.ask the user to think of a number n between 1 to 100
b.Then check with the User if the number is less then n/2 or greater
c.Repeat till the magic number is reached..

-----------------------------------------------------------
3.Extend the flip coin problem till either heads or tails wins 11 times.

#!/bin/bash -x
heads=1;
tails=1;
while(( $heads != 11 && $tails != 11 ))
do
a=$(( $RANDOM%2 ))
if [[ $a -eq "1" ]]
then
 echo "heads"
heads=$(($heads + 1))
else
 echo "tails"
tails=$(($tails + 1))
fi
done
 OUTPUT:::::::::::::::::::::::::::::::::::
$ ./headtail.sh
+ heads=1
+ tails=1
+ ((  1 != 11 && 1 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=2
+ ((  1 != 11 && 2 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=2
+ ((  2 != 11 && 2 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=3
+ ((  3 != 11 && 2 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=4
+ ((  4 != 11 && 2 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=3
+ ((  4 != 11 && 3 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=5
+ ((  5 != 11 && 3 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=6
+ ((  6 != 11 && 3 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=7
+ ((  7 != 11 && 3 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=8
+ ((  8 != 11 && 3 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=4
+ ((  8 != 11 && 4 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=5
+ ((  8 != 11 && 5 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=6
+ ((  8 != 11 && 6 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=9
+ ((  9 != 11 && 6 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=7
+ ((  9 != 11 && 7 != 11  ))
+ a=0
+ [[ 0 -eq 1 ]]
+ echo tails
tails
+ tails=8
+ ((  9 != 11 && 8 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=10
+ ((  10 != 11 && 8 != 11  ))
+ a=1
+ [[ 1 -eq 1 ]]
+ echo heads
heads
+ heads=11
+ ((  11 != 11 && 8 != 11  ))
-----------------------------------------------------------------
4.Write a program where a gambler starts with Rs 100 and places Re 1 bet until he/she goes broken i.e no more money to gamble or reaches the
 goal of Rs 200.keeps track of number of times won and number of bets made
#!/bin/bash
read -p "enter amount in between 100-200 : " sm
if [[ $sm -gt "100" && $sm -lt "200" ]]
then
won=0
loss=0
while(( $sm > 0 && $sm <= 200 ))
do
random=$(( $RANDOM%2 ))
case $random in
   1)
sm=$(( $sm + 1 ))
echo -n "$sm"
won=$(( $won +1 ))
;;
    0)
sm=$(($sm -1 ))
echo -n "$sm"
loss=$(($loss +1 ))
;;
esac
done
echo "won = "$won
echo "loss = "$loss
else
echo "enter amount in range between 100-200 "
fi
OUTPUT::::::::::::::::::::::::::::::::::::::::::::::::
enter amount in between 100-200 : 123
won = 1278
loss = 1401


===================================================================================================
         Functions Practice Problems

1.Help user find degF or degC based on their conversion selection.use case statement and ensure that the inputs are within the Freezing point(0c/32F)and the Boiling point of water(100c/212 F)
  a.degF=(degC * 9/5)+32
  b.degC=(degF -32)*5/9
#!/bin/bash -x
myfun1()
{
  f=$((( $c * 9/5) + 32 ))
echo "$f"
}
myfun2()
{
c=$((( $f - 32 ) * 5/9 ))
echo "$c"

}

#Main shell
read -p "enter a number: " n
case $n in
    1)
   read -p "enter a number: " c
  myfun1 $f
   ;;
   2)
read -p "enter a number: " f
 myfun2 $c
;;
esac
OUTPUT:::::::::::::::::::::::::::::::::::::::::::::
$ ./fun1.sh
+ read -p 'enter a number: ' n
enter a number: 1
+ case $n in
+ read -p 'enter a number: ' c
enter a number: 100
+ myfun1
+ f=212
+ echo 212
212
$ ./fun1.sh
+ read -p 'enter a number: ' n
enter a number: 2
+ case $n in
+ read -p 'enter a number: ' f
enter a number: 32
+ myfun2
+ c=0
+ echo 0
0
-------------------------------------------------------
2.write a function to check if the two numbers are palindromes

#!/bin/bash
function myfunc()
{
read -p "enter a number: " num
n=$num
rev=0
while(($num -gt 0 ))
do
rem=`expr $num % 10`
rev=`expr $rev\*10 + $rem`
num=`expr $num/10`
done
echo "reverse of $n is $rev"
if [[ $n == $rev ]]
 then
echo "$a is a palindrom"
else
echo "$a is not a palindrom"
fi
}
#Main shell
read -p "enter a number: " num
myfunc


---------------------------------------------------------------------------------
3.Take a number from user and chcek if the number is a prime then show that its palindrome is also prime
a.write function check if number is prime
b.write function to get the palindrom
c.check if the palindrome number is also a prime

a....
#!/bin/bash -x
myfunc1()
{
a=$(( $n / 2 ))
b=0;
for(( i=2;i<=$a;i++ ))
do
if [[ `echo $n $i | awk '{print $1%$2}'` == 0 ]]
then
echo "it is not a prime number "
b=1
break;
fi
done
if [ $b -eq 0 ]
then
echo "it is a prime number "
fi
}
#Main shell
read -p "enter a number: " n
myfunc1
OUTPUT::::::::::::::::::::::::::::::
$ ./primeandpalindrom
+ read -p 'enter a number: ' n
enter a number: 4
+ myfunc1
+ a=2
+ b=0
+ (( i=2 ))
+ (( i<=2 ))
++ echo 4 2
++ awk '{print $1%$2}'
+ [[ 0 == 0 ]]
+ echo 'it is not a prime number '
it is not a prime number
+ b=1
+ break
+ '[' 1 -eq 0 ']'
B....

#!/bin/bash
myfunc()
{
n=$num
rev=0
while(($num >= 0 ))
do
rem=$(( $num % 10 ))
rev=$(( ($rev*10) + $rem ))
num=$(( $num/10 ))
done
echo "reverse of $n is $rev"
if [[ $n == $rev ]]
 then
echo "$num is a palindrom"
else
echo "$num  is not a palindrom"
fi
}

#Main shell
read -p "enter a number: " num
 myfunc

C...

#!/bin/bash
myfunc()
{
n=$num
rev=0
while(($num >= 0 ))
do
rem=$(( $num % 10 ))
rev=$(( ($rev*10) + $rem ))
num=$(( $num/10 ))
done
echo "reverse of $n is $rev"
if [[ $n == $rev ]]
 then
echo "$num is a palindrom"

a=$(( $num / 2 ))
b=0;
for(( i=2;i<=$a;i++ ))
do
if [[ `echo $n $i | awk '{print $1%$2}'` == 0 ]]
then
echo "it is not a prime number "
b=1
break;
fi
done
if [ $b -eq 0 ]
then
echo "it is a prime number "
fi
else
echo "$num  is not a palindrom"
fi
}

#Main shell
read -p "enter a number: " num
 myfunc

------------------------------------------------------------
